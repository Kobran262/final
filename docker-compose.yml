version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: srecha_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: srecha_invoice
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-srecha_secure_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - srecha_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d srecha_invoice"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: srecha_backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-srecha_secure_password_2024}@postgres:5432/srecha_invoice
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_here_make_it_very_long_and_random}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8080}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      COMPANY_NAME: ${COMPANY_NAME:-Среħа 2024}
      COMPANY_ADDRESS: ${COMPANY_ADDRESS:-Belgrade, Serbia}
    ports:
      - "3000:3000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - srecha_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: srecha_frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - srecha_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (для кэширования и сессий)
  redis:
    image: redis:7-alpine
    container_name: srecha_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - srecha_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: srecha_backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD:-srecha_secure_password_2024}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - srecha_network
    depends_on:
      postgres:
        condition: service_healthy
    command: /bin/sh -c "chmod +x /backup.sh && /backup.sh"
    profiles:
      - backup

  # Monitoring (Prometheus - опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: srecha_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - srecha_network
    profiles:
      - monitoring

  # Grafana (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: srecha_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - srecha_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  srecha_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
